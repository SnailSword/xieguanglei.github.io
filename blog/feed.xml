<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[一叶斋]]></title>
        <description><![CDATA[一叶障目 一叶知秋]]></description>
        <link>http://xieguanglei.github.io/</link>
        <generator>RSS for Node</generator>
        <lastBuildDate>Fri, 17 Aug 2018 13:05:55 GMT</lastBuildDate>
        <atom:link href="http://xieguanglei.github.io/blog/feed.xml" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[逐个像素的艺术 —— 2018 iWeb 峰会演讲（全文）]]></title>
            <description><![CDATA[<h1 id="-2018-iweb-">逐个像素的艺术 —— 2018 iWeb 峰会演讲（全文）</h1>
<p><img src="https://gw.alicdn.com/tfs/TB1lboDj3ZC2uNjSZFnXXaxZpXa-800-450.jpg" alt="001"></p>
<p>大家好。很荣幸能够站在这个舞台上。我今天演讲的主题是《逐个像素的艺术》。</p>
<p><img src="https://gw.alicdn.com/tfs/TB1k46zoRnTBKNjSZPfXXbf1XXa-800-450.jpg" alt="002"></p>
<p>先简单作一下自我介绍吧，我来自淘宝网，大家知道阿里巴巴大部分员工都是有花名的，我在公司内的花名是「叶斋」。</p>
<p>我大概从 2013 年开始接触前端图形技术，包括 HTML5 / CSS3 / canvas / webgl 等等，后来我还翻译了一本书，叫《WebGL 编程指南》，如果有学习过原生 WebGL 的，我想应该听说过或者看过这本书吧。</p>
<p>我毕业后，一直在淘宝的前端团队工作，目前负责手机淘宝 App 内部的前端图形渲染基础能力的建设。同时我还维护着一个开源的 WebGL 引擎 G3D。</p>
<p>我的博客，还有邮箱都在这里。如果这次分享之后，大家还有想和我交流的，欢迎给我发邮件。</p>
<p><img src="https://gw.alicdn.com/tfs/TB1ygOco_CWBKNjSZFtXXaC3FXa-800-450.jpg" alt="003"></p>
<p>我读高中的时候，遇到一位音乐老师。他曾经在北朝鲜待过一段时间，所以曾在课上播放过一些北朝鲜的官方大型文艺演出节目的片段。北朝鲜的大型文艺演出有一个特点，就是规模特别大，演出的人很多，但是动作及为整齐，其中最能给我留下深刻印象的，就是「人工大屏」。</p>
<p>什么是「人工大屏」呢？就是有很多很多，估计有上万人，站在类似体育馆看台的台阶上，每个人举一块小牌子，牌子上的颜色各不相同。这样从远处看，这些人就组成了一块显示屏。这块显示屏内容可以跟着演出的节奏进行切换，有时候还可以播放动画，非常整齐。</p>
<p>当时我就想，这演出的背后得，付出多大的代价去训练。因为这种情况，只要有一个人不协调，那就是非常明显的。而要把上万个人训练得没有一个人出错，难度有多高。我觉得，这不是大力出奇迹就能做到的，背后应该有极为严密的组织和极为合理的方法，才能把上万人训练成这样。这是怎么做到的呢？当时我就百思不得其解。直到后来，我学习了 WebGL 和 OpenGL，我才理解到，其实 WebGL 和 OpenGL 所做的事情和训练这么多人是一样的。</p>
<p><img src="https://gw.alicdn.com/tfs/TB1oRGIoGAoBKNjSZSyXXaHAVXa-800-450.jpg" alt="004"></p>
<p>回到这次演讲的题目。我演讲的题目是《逐个像素的艺术》，那什么是像素呢？其实刚刚我说的「人工大屏」，其中每个人其实就是一个像素。单个像素的行为是非常简单的，就是去显示单个颜色。但是，当像素的数量膨胀，达到相当规模的时候，就构成了图像，构成了电影、游戏，呈现了丰富多彩的世界。</p>
<p>而 WebGL / OpenGL 的核心能力，就是「逐个像素地生成颜色」。这里有个误区，就是很多同学一听到 WebGL，第一反应就是，这是用来做 3D，做游戏的。其实呢，WebGL 本身跟 3D 没有太大的关系，它只是提供了「逐像素绘图」的能力，3D 相关的逻辑是更上层的 Shader 层和 JavaScript 层处理的。</p>
<p>我想在场的，大部分是前端程序员，我们可以回想一下，在面向 UI 的编程过程中，我们所操作的最小单元是什么？是一个按钮，一个 input 框，对不对？至于这个按钮，这个 input 框里面的结构是什么样的，这是浏览器本身实现的，我们并没有太多办法去改变。如果我们想要获得像素级别的控制，只能依赖 canvas 标签。</p>
<p>那么熟悉 canvas 的同学可能会说了，canvas 2d 绘图上下文也具有「逐像素绘图」的能力，对不对。我们知道，canvas 2d context 有一个 <code>putImageData</code> 方法。通过这个方法，我们可以去构造一个 UInt16Array，然后向里面填入颜色，每四个值表示一个像素，RGBA。确实，这条路行得通，但是太慢了，一个 100 x 100 的 canvas，这个 canvas 其实尺寸已经很小了。这样一个 canvas 每一帧要循环 100 乘以 100，也就是 10000 次。但是 WebGL 不一样，WebGL 可以利用显卡 GPU 加速的能力，每一个像素的颜色由一个单独的 GPU 核心运算。我们知道 GPU 的核的数量非常多，可以并发进行大量的简单的运算。有个段子，说 GPU 和 CPU 有什么区别，它俩的区别就是 1 个博士生和 1000 个小学生的区别。现在要进行 1000 次简单的四则运算，请问是 1 个博士生算得快，还是 1000 个小学生算得快？那肯定是 1000 个小学生算得快，对吧，因为 1000 个小学生可以进行大量的并发运算。</p>
<p>那么我这次演讲的题目，《逐个像素的艺术》，主要呢就是分享我个人学习、实践 WebGL 的一些心得、体会，以及 WebGL 技术在手机淘宝内部的应用情况。</p>
<p><img src="https://gw.alicdn.com/tfs/TB1ZHF4o5MnBKNjSZFzXXc_qVXa-800-450.jpg" alt="005"></p>
<p>我们看一下 WebGL 在 Google 上的搜索热度趋势。WebGL 差不多 09 年开始有一些草案，11 年标准正式发布，一时间可以说是万众瞩目，可以说那个时候，大家对 WebGL 的期待是很高的，都觉得这技术能够彻底颠覆 Web 的形式。但是呢，随着时间的推移，WebGL 热度，大家可以看到，不仅没升，反而稳中有降。从 11 年到现在这么多年，WebGL 似乎并没有什么里程碑式的产品，更没有像当初大家预期的那样，使 Web 发生翻天覆地的变化。</p>
<p>我们知道前端技术的迭代周期是很快的，逆水行舟，不进则退，如果说 React 的搜索热度趋势和上面这张图差不多的话，那我估计 React 离完蛋不远了。那是不是说，WebGL 就要完蛋了呢？当然不是。否则我也不会站在这里，对吧？</p>
<p><img src="https://gw.alicdn.com/tfs/TB1IGpVo2ImBKNjSZFlXXc43FXa-800-450.jpg" alt="006"></p>
<p>WebGL 并没有完蛋！</p>
<p>首先 WebGL 是一种非常底层的技术，注定了是很慢热的。技术深度比较深，从人才到技术的积累速度都比传统前端技术慢很多，但相对来说技术的过时也会慢很多。</p>
<p>随着无线化的全面到来，PC 由消费产品向生产力工具转变的趋势，我认为这也许会给 WebGL 带来新的机遇。我们知道 WebGL 的功能始终只是 OpenGL ES 的子集，OpenGL ES 又是 OpenGL 的子集，所以 WebGL 在与桌面游戏竞争时，画面效果一直是出于下风的，对游戏来说，画面效果是极为重要的。另一方面，Web 化并未给桌面游戏带来什么太大的好处，为了玩到一个 3A 级大作，比如《巫师3》这种，用户完全有耐心去进行桌面游戏的安装和更新操作，在浏览器里玩对用户来说并没有太大的价值。</p>
<p>但是，生产力工具不一样。随着各类 ERP 系统，特定领域的管理工具（比如家居家装设计，医疗影像等等）从桌面迁移到 Web，WebGL 将会成为这些工具在 Web 上进行图形渲染的唯一选择。而且，生产力工具的图形渲染需求，对画面的要求没有游戏那么高，而迁移到 Web 这件事带来的好处，又会比游戏强很多。</p>
<p>一个明证就是，新一代更加专业的 WebGL 引擎 Babylon.js 的出现，在很多 Web 生产力工具中得到应用。</p>
<p>所以我认为，在今天，WebGL 仍然是值得学习的。</p>
<p>但是我在学习 WebGL 过程中发现，对于没有太多基础的前端工程师而言，入门 WebGL 是一件非常困难的事情。</p>
<p><img src="https://gw.alicdn.com/tfs/TB1C95YoIUrBKNjSZPxXXX00pXa-800-450.jpg" alt="007"></p>
<p>我总结了一下，对一个初学者来说，有三座大山需要去爬。分别是数学基础，渲染管线和状态机，3D 建模知识。下面我简单介绍下：</p>
<p><img src="https://gw.alicdn.com/tfs/TB143X7oY3nBKNjSZFMXXaUSFXa-800-450.jpg" alt="008"></p>
<p>首先是数学基础。不知道在座的各位，高中立体几何有没有全部还给老师。我这里给大家出了一道题。左边我画了一个坐标系，有 X 轴 Y 轴和 Z 轴，然后空间中有一个点 A，从 A 点向几个面和轴作垂线。然后角 AOB 是 45 度，角 BOP 是 30 度，，求 A 点的坐标是多少。</p>
<p>（互动环节，第一个回答上来的同学送一个淘公仔，以下解释答案）。</p>
<p>A 点的坐标是 (0.866, 1, 0.5)，具体是怎么算的呢？AO 是 1.414，也就是 根号2，角 AOB 是 45 度，所以我们知道 AB 和 OB 的场地都是 1，AB 的长度就是坐标 Y 分量的值。然后角 BOP 是 30 度，我们知道 sin(30°) 是 0.5，那么 BP 就是 0.5，OP 是根号3除以2，也就是 0.866。最后的答案是 (0.866, 1, 0.5)。</p>
<p><img src="https://gw.alicdn.com/tfs/TB1IBuWoHwrBKNjSZPcXXXpapXa-800-450.jpg" alt="009"></p>
<p>下面我们来看另一个问题，就是如何描述一个点在空间中的变换，所谓变换就是指平移，旋转和缩放。举个例子，一个点 P 的坐标是 (x, y, z)，平移 (a, b, c)，也就是沿 X 轴平移 a，沿 Y 轴平移 b，沿 Z 轴平移 c，求平移后的点的坐标。</p>
<p>这个问题其实很简单，对吧，答案是 (x+a, y+b, z+c)，方法也很简单，就是简单的矢量加法，各个分量相加就可以。</p>
<p>但是在 WebGL 中，并不是这样计算的，而是像右边这样，使用一个矩阵来计算。首先我们给点的坐标加上一位 1，得到 (x, y, z, 1)，然后使用这样一个矩阵来乘列向量。4 乘 4 的矩阵乘以 4 维列向量的方法，得到一个新的 4 维列向量，每一个值是矩阵的一行乘以列向量得到的单个值。比如，<code>x+a</code> 是这样算出来的：<code>1*a+0*b+0*c+1*1</code>。</p>
<p>我们发现，使用这个矩阵乘下来的结果和之前平移加和的结果是一样的，那这个矩阵就称之为平移矩阵，是不是很神奇？那使用矩阵有什么好处呢？其实啊，除了平移，旋转和缩放也可以统一用矩阵来描述，这样就可以将不同的变换统一为一个格式来描述。而且，当多个变换复合的时候，比如先旋转再平移，我们也可以将旋转矩阵和平移矩阵相乘得到的新矩阵，来描述「先旋转再平移」这么一个复合的变换，非常方便。</p>
<p>那使用矩阵还有一个好处，就是矩阵不仅可以变换位置，还可以变换矢量。上面我们给点 P 的坐标多加了一位 1，如果我们多加的一位是 0，会怎样？加一位 0，表示这个 x,y,z 表示的是一个空间中的一个方向，而不是位置，而平移一个方向，方向本身是不会变的，矩阵乘下来，因为这一位是 0 了，所以也不会变。</p>
<p>熟悉 CSS3 的同学，都知道 CSS3 有个 transform 属性，我们可以使用 translate, rotate 等关键字来描述变换，我想大家应该都用得很溜吧。其实仔细看文档的同学，就会发现还可以使用一个叫 matrix 的关键字来描述变换，这里其实就是使用变换矩阵来描述，这种方式更加直接，实际上浏览器内部也是使用矩阵来描述的。</p>
<p><img src="https://gw.alicdn.com/tfs/TB1nB47oYArBKNjSZFLXXc_dVXa-800-450.jpg" alt="010"></p>
<p>刚刚我举了这俩例子，只是图形学所需要数学知识的冰山一角。当你想要描述旋转的时候，你可能要用到欧拉角，四元数；对模型进行变换的时候，需要考虑是在本地坐标系还是在世界坐标系中进行；相机里也涉及到很多数学知识，包括逆矩阵，不同类型的投影矩阵等等等等。</p>
<p><img src="https://gw.alicdn.com/tfs/TB1uTpyo8smBKNjSZFFXXcT9VXa-800-450.jpg" alt="011"></p>
<p>下面来看第二座大山，渲染管线和 WebGL 状态机。渲染管线这个词不知道大家听说过没有，它是 WebGL 的核心。它提供了一个「友好」的对显卡工作原理的描述，我认为理解了渲染管线，就基本理解了 WebGL 的本质。</p>
<p>这里简单解释一下，举个例子，我要绘制这么一个三角形，那么在 JavaScript 环境中，我们需要构建出一些结构性的数据，来描述这个三角形，其中最重要的就是顶点位置信息，这里三个点 ABC 分别是 1,0,1,3,2,0,0,3,0.5。将这些结构性数据发送给 vertexShader 顶点着色器，顶点着色器是一小段用 glsl 编写的程序，在初始化的时候由 JavaScript 动态编译然后放在渲染管线里面。经过顶点着色器处理，三角形的顶点位置发生了变化，它们会被变换到 CCV 标准立方体中，标准立方体是一个在 X，Y，Z 轴上均在 -1 到 1 的这么一个，边长为 2 的立方体。</p>
<p>然后，数据经过一个名为「光栅化」的过程，三角形就被转化为了屏幕中的一些像素，也就是说这些像素需要被「着色」。</p>
<p>然后再经过片元着色器的处理，片元着色器和顶点着色器一样，也是 JavaScript 初始化的时候放置到渲染管线中的。经过偏远着色器的处理，每一个像素就被「上色」了，最终绘制得到一个红色的三角形。</p>
<p>这里我其实还是讲得比较简单的，还有一些环节（比如深度检测等等）没有涉及。但是呢，如果你能够弄明白渲染管线运行的整个过程，明白 WebGL 的每个 API 究竟是在操作渲染管线的哪个部分，那我觉得啊，你学习 WebGL 已经开始入门了。</p>
<p><img src="https://gw.alicdn.com/tfs/TB1qMd7oY3nBKNjSZFMXXaUSFXa-800-450.jpg" alt="012"></p>
<p>除了渲染管线，你还需要去了解 WebGL 状态机。这么说吧，我们可以把 WebGL 看成是一个大机器，这个机器的产出，就是每一帧生成一张图片，那么这个机器运行需要一些原料，机器上面还有很多开关。通常，机器运行的流程是这样的：</p>
<p>在初始化的时候，我们要准备原料：这些原料包括主要包括着色器程序，数据块，纹理等等。原料的准备是比较耗时的；然后，就开始了每一帧的绘制。我们知道一般来说我们 1 秒钟会渲染 24 帧，如果帧数降低的话，就会给人卡的感觉。</p>
<p>在每一帧，我们做的事情包括，第一步，是去把原料和机器连接起来，这个操作的开销是很低的，大家可以理解为把指针指向原料；第二步，是去操作机器上的各种开关，这些开关可能是离散状态的，就像普通的开关一样，也有可能是需要你输入浮点数，可以把他理解为滑块型的开关；第三部，命令机器，开动起来，也就是去调一次 draw call（drawElements 或者 drawArray）。如此三步，就可以绘制场景中的一部分了。一帧有可能会重复多次上述的流程，最后就这一帧的图像就绘制出来了。</p>
<p>可以看到，每一帧的操作其实性能开销是比较低的，初始化时性能开销很高。那么基本上遵循下面这个原则，就可以让 WebGL 应用保持比较在一个比较好的水平了：首先，不要在每一帧中去处理物料本身；其次，尽可能减少每一帧 drawCall 的次数，当然代价就是初始化构建原料时的复杂度可能会增加。</p>
<p>理解了 WebGL 状态机，再去操作 WebGL API，我相信你就会有种成竹在胸，游刃有余的感觉了。</p>
<p><img src="https://gw.alicdn.com/tfs/TB1QmXhoYorBKNjSZFjXXc_SpXa-800-450.jpg" alt="013"></p>
<p>最后一座大山，是 3D 建模知识。我们不可能始终使用 JavaScript 代码来构建渲染场景需要用到的模型。通常，要借助一些三维建模软件，比如 blender，maya，3d max 甚至 sketchup 等等来。我想如果有志于搞 3D 编程的话，至少学会使用一款 3D 建模软件，进而理解 3D 模型的结构。只有理解 3D 模型的结构，才可能进一步选择合适自己的模型格式。</p>
<p>虽然模型格式有多种多样，比如 obj，stl，fbx，gltf，但是最基本的结构是一致的。举个例子：我有一个模型，就是一个正方形，处于 X-Y 轴这个平面上。它的模型里包含了如下这些信息：一是顶点的坐标，毋庸置疑，这里有四个顶点，所以使用长度为 12 的一个数组来表示；二呢，是法线数据，法线是极为重要的，是光照的基础，这里法线是和顶点一一对应的，都是指向 Z 轴正方向，也就是 (0,0,1)；三是 UV 数据，因为我们这边贴了一张纹理，UV 数据表示顶点与纹理坐标的对应关系，比如 A 这个点对应在纹理图片中是左上角，所以 A 这个点的 UV 是 (0,0)；四是顶点索引数据，因为通常我们是通过绘制三角形来绘制模型，这里的正方形 ABCD 其实是通过绘制两个三角形 ABC 和 ACD 来完成的，索引 [0,1,2,0,2,3] 表示的就是绘制三角形的顺序。当然最后我们还是用到一张图片纹理。以上这些，就是用来表示一个模型最基础的数据结构。</p>
<p><img src="https://gw.alicdn.com/tfs/TB1i0R3oVooBKNjSZFPXXXa2XXa-800-450.jpg" alt="014"></p>
<p>不同的渲染算法，可能会对模型格式提出不同的要求。比如 PBR 渲染（基于物理规则的渲染），就要求模型具有诸如粗糙度，金属度之类的信息。下面是 G3D 渲染的一个经典的 PBR 头盔 demo，这里模型中除了基本的顶点数据，UV 数据，还会使用多张纹理来表示不同的参数，比如基地色；粗糙度/金属度，这里把两个参数合并在了一张纹理的两个通道中；法线，这里法线其实是一个修正量，用来修正跟着顶点的法线，会获得更加细腻的效果；还有发光分量等等。</p>
<p>所以，当我们渲染的物体，材质越来越复杂，算法越来越复杂的时候，实际上模型本身也需要去做出合适的改变。</p>
<p><img src="https://gw.alicdn.com/tfs/TB11JF3oVooBKNjSZFPXXXa2XXa-800-450.jpg" alt="015"></p>
<p>这样，我们就把三座大山全部过完了。除了这三座大山，在入门 WebGL 的过程中，还有一些比较小的门槛，或者说小山坡吧。不过我相信，如果你连前面三座大山都能克服下来，下面这些问题应该不大会阻碍你了。比如说，我们要去熟悉 WebGL 的古怪风格的 API，做任何事情都要先 bind 一下；我们要去学习 GLSL 的语法，这是编写着色器的语言，不过如果你有一些 C 语言基础的话，这应该不是什么难事；比如，我们需要掌握 WebGL 调试的一些方法，尤其是调试 Shader 的一些方法，在 Shader 里面不能 <code>console.log</code>，通常需要一些特殊的技巧把一些中间结果给输出出来；当然，因为 WebGL 项目所需要管理的规模会越来越大，管理的资源的种类可能也会越来越多，所以对前端工程能力也有一定的要求，至少 Webpack 得用得比较溜，各种资源，还有着色器源码的拼接，内联这些工作，都是可以放在编译时来完成的。</p>
<p><img src="https://gw.alicdn.com/tfs/TB1GBqWoHwrBKNjSZPcXXXpapXa-800-450.jpg" alt="016"></p>
<p>当你翻过了这三座大山，也克服了这些小山，你就算精通 WebGL 了吗？我想再给大家泼一盆冷水，其实这时候，也才算是刚刚入门而已。当你掌握了上面这些知识并能熟练运用，你就算是走进了图形渲染技术这座花园的大门，这座花园里有着数不尽的奇珍异宝，你可以自如地把它们拿过来把玩把玩。你可以去更深入地去阅读书籍和文献，去探寻比如水体该如何实现，宝石该如何实现这些一个一个具体又精妙的问题，然后尝试用你手上的工具，WebGL 来实践。</p>
<p><img src="https://gw.alicdn.com/tfs/TB1BM4wo_qWBKNjSZFAXXanSpXa-800-450.jpg" alt="017"></p>
<p>下面讲一讲图形渲染技术在手机淘宝内部的使用，也就是我们团队所做的一些工作。我们团队，是淘宝技术部的终端架构团队，leader 是大家熟悉的 winter 老师。我们团队现在主要是做两个体系，一个是 UI 体系，一个是图形体系。UI 体系主要就是包含 Weex 相关的事情，图形体系主要是 GCanvas 和 G3D。那我们今天分享的主题是 WebGL，所以重点呢是 G3D，但是说到 G3D，不得不提到 GCanvas，而说到 GCanvas 又不得不提到 Weex，那我们就从 Weex 开始说起。</p>
<p>在过去的一年多里，手机淘宝内发生了一个全面 Weex 化的过程。Weex 是淘系应用，包括手机淘宝，手机天猫，里面的一个基础技术框架，Weex 有点类似于 React Native，通过摒弃 WebView 来提高界面渲染的性能和功能。现在大家在手机淘宝里看到的绝大多数页面都已经是 Weex 的了。</p>
<p>但是全面 Weex 化之后，发现了一个问题，就是 Weex 下没有 Canvas 标签。可是使用 Canvas 的需求仍然存在，尤其是遇到营销活动，比如双十一双十二，这时候需求会很多。这时候，我们团队就发展了一个叫做 GCanvas 的产品，目标呢，就是提供一个符合 W3C 标准的 API 的，Weex 环境下的 Canvas。GCanvas 既支持 2d 绘图，也支持 webgl 绘图。</p>
<p>有了 GCanvas 之后呢，我们就像作一些尝试，在 GCanvas 上来渲染一些 3d 场景，一开始我们试着把 babylon.js 等一些已有的 3D 引擎接进来，后来发现行不通，因为这些引擎都依赖了大量的浏览器 API，比如说它会调用 <code>document.createElement</code> 来创建离屏的 canvas 来进行一些预处理，比如它会发起 ajax 请求去加载资源和图片，等等，它的设计和架构就是为浏览器量身定制的。而我们需要的是一个纯粹的，除了 canvas 以外，不依赖其他浏览器 API 的一个渲染引擎。于是我们就写了重新写了一个 3D 引擎，叫 G3D。</p>
<p><img src="https://gw.alicdn.com/tfs/TB1Z8uWoHwrBKNjSZPcXXXpapXa-800-450.jpg" alt="018"></p>
<p>这里我简单地做了一个对比，最左边的是 Web 应用，一般会依赖一个 3D 渲染引擎比如 three.js，babylon.js，由引擎去调用 canvas 的 webgl 绘图上下文，通过浏览器调用系统的图形 API 也就是 OpenGL；而纯 native 的应用，比如手机游戏，一般会用一个大而全的框架，比如 unity，这个框架做的不仅仅是渲染这一层了，还包含很多其他，比如游戏逻辑等等。对于手机淘宝这样的混合型 App，可以依赖一个对标 three.js 的框架，也就是我们的 G3D，然后去调用一个对标 canvas 的 GCanvas，最终还是调用 OpenGL ES。</p>
<p><img src="https://gw.alicdn.com/tfs/TB1DlnJoJcnBKNjSZR0XXcFqFXa-800-450.jpg" alt="019"></p>
<p>看一下 G3D 提供的功能，主要分为四块：底层功能是不以 API 的形式开放给开发者的，包括物料管理，状态机管理，场景树，节点变换等等；基础功能包括相机，元几何体，像立方体，球体，圆柱圆锥等等，不同的光照，不同的材质；交互动画，点选拖拽；最上面是插件功能，主要包含对各种模型的解析，包括解析 OBJ 格式的模型，STL 格式的，字体，还有 GLTF 格式的。</p>
<p><img src="https://gw.alicdn.com/tfs/TB1MftooZj_B1NjSZFHXXaDWpXa-800-450.jpg" alt="020"></p>
<p>这是 G3D 的一些 demo 的演示，分别是透视和正射相机、网格、平行光与点光、元几何体、原始材质 RawMaterial、点选、拖拽、顶点形变动画、PBR 材质、阴影、三种不同的格式模型；最后两个是 PBR 渲染的模型，上面一个是戒指，下面是一个头盔。这个头盔 demo 也是比较经典的用来验证 PBR 渲染的一个案例。</p>
<p><img src="https://gw.alicdn.com/tfs/TB18RqWoHwrBKNjSZPcXXXpapXa-800-450.jpg" alt="021"></p>
<p>下面是 G3D 的系统架构，这个大家看一看就可以了。值得注意的是，G3D 虽然号称完全不依赖浏览器 API，但是实现过程有一些确实是没办法绕过的，比如 Image 和 Video 这样的对象。这里 G3D 是通过依赖注入的方式来完成解耦，就是初始化 G3D 的时候把这些对象注入进 G3D。</p>
<p><img src="https://gw.alicdn.com/tfs/TB1N_lyo8smBKNjSZFFXXcT9VXa-800-450.jpg" alt="022"></p>
<p>这样我的演讲就结束了，谢谢大家！最后，按照惯例要放这个的，就是说：我们招人。</p>
<p>我们是淘宝技术部，终端架构团队，由 winter 老师亲自带领的队伍，负责维护 Weex / Rax / Binding X / GCanvas / G3D 等多个淘系应用中的基础框架，现在跪求：一个是资深前端工程师/专家，一个是资深无线工程师/专家，如果有图形渲染，图像处理等背景，就更好了!</p>
<p>好的，谢谢大家！</p>
<p>（完）</p>
]]></description>
            <link>http://xieguanglei.github.io/post/2018-iweb-speech.html</link>
            <guid isPermaLink="false">2018-iweb-speech</guid>
            <dc:creator><![CDATA[谢光磊]]></dc:creator>
            <pubDate>Sun, 12 Aug 2018 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[活用 Shader，让你的页面更小，更炫，更快]]></title>
            <description><![CDATA[<h1 id="-shader-">活用 Shader，让你的页面更小，更炫，更快</h1>
<p>可编程着色器（shader）是运行在 GPU 中的程序，是现代图形渲染技术的基础。Shader 赋予了开发者「逐像素着色」的能力。桌面/移动设备的图形程序 API 诸如 OpenGL，OpenGL ES，DirectX 以及新一代的 Vulkan，shader 都是重中之重，核心中的核心。</p>
<p>WebGL 的出现，使得在浏览器环境中渲染 3D 场景变得轻而易举。但是 WebGL 和 shader 不仅可以用来渲染 3D 场景，还可以做一些其他酷酷的事情。前两天，我用 shader 技术改造 / 复刻了之前开发的一个业务页面，颇有心得和启发，不妨记录下来。</p>
<blockquote>
<p>广告：在 GCanvas 的帮助下，前端开发可以在 Weex，RN 等 Hybrid 环境中使用本文中用到的技术。详情见 <a href="https://alibaba.github.io/GCanvas/">GCanvas</a>。</p>
</blockquote>
<p>先看一下效果：<a href="http://g.alicdn.com/gama/assets/0.0.10/assets/shader-view-demo/compare.html">链接</a></p>
<p><img src="https://img.alicdn.com/tfs/TB1RNl_qntYBeNjy1XdXXXXyVXa-600-529.jpg" alt=""></p>
<p>左侧是原页面，<a href="http://g.alicdn.com/gama/assets/0.0.10/assets/shader-view-demo/index.html">地址</a>；右侧是用 Shader 复刻后的页面，<a href="http://g.alicdn.com/gama/assets/0.0.10/assets/shader-view-demo/shader.html">地址</a>。</p>
<p>这其实是 2018 年春晚项目的一个活动页面，页面结构非常简单。这个页面当时是我完成的，所以现在复刻起来熟悉一些。</p>
<p>我们可以看到，复刻前的页面（后面称「原页面」）是静态的，加载了 1 个 js 文件和 6 张图片共 599K 的资源（包含一张 502K 的大尺寸透明 png 图片）；而复刻后的页面上，有不少元素在动，加载了 1 个 js 文件和 4 张图片共 122K 的资源。不管是视觉效果，还是页面尺寸上的提升，都是比较明显的。</p>
<p><img src="https://img.alicdn.com/tfs/TB1B88_qntYBeNjy1XdXXXXyVXa-500-254.jpg" alt=""></p>
<p><img src="https://img.alicdn.com/tfs/TB1Xcsip1uSBuNjy1XcXXcYjFXa-500-226.jpg" alt=""></p>
<p>下面，我们就以这个页面为例，分析一下，使用 Shader 是如何让这个页面更小，更炫，更快。</p>
<blockquote>
<p>阅读后面的文本需要一些 webgl 和 glsl 的基础知识，之前在团内对曾做过一些培训，参加的同学应该不会有什么压力，没参加的同学，也可以稍微看下 the book of shaders 这篇教程。Shader 比你想象的要简单易用，相信我。</p>
</blockquote>
<h1 id="-">大尺寸透明背景图</h1>
<p>原页面存在的一个最大的问题是，有一张特别大的透明背景图。</p>
<p><img src="https://img.alicdn.com/tfs/TB11dUjp1uSBuNjy1XcXXcYjFXa-750-571.jpg" alt=""></p>
<p>这张图的体积达到了惊人的 501K，这是因为这张图是具有透明通道的 png 图片。而且由于这张图是广告内容，可能不止一张，是无法融合到背景里去的，必须透明。这时怎么优化呢？
我们知道，具有透明通道的 png 的压缩是比较困难的；而不具备透明通道的图片，我们可以把它转化为 jpg 等格式，压缩比就高得多了，我们就可以以较小的质量损失去换取较大的压缩空间。</p>
<p>我的思路是这样：把这张透明的 png 格式图片拆分为两张不透明的 jpg 格式图片。这两张不透明的图片，其中一张继承 png 图片的 rgb 通道，还有一张则仅使用 r 通道储存 png 图片的 a 通道。然后把这两张图片拼接在一起，给 WebGL 使用。由于拼接后的这张图没有透明度分量，所以可以使用 jpg 格式压缩，尺寸大幅度降低。这张图只有 41.5k，大约为之前的 8.2%。</p>
<p>这张图看上去是这样的：</p>
<p><img src="https://img.alicdn.com/tfs/TB13tUjp1uSBuNjy1XcXXcYjFXa-700-700.jpg" alt=""></p>
<blockquote>
<p>注意，前一张图的像素尺寸是 750x571，而后一张图的像素尺寸为 1024x1024，这里我并没有通过缩小图片的像素尺寸来进行压缩。</p>
<p>此外，第二张图看上去有些变形，这是因为图片尺寸为 2 的整数次幂，WebGL 能够方便地生成 mipmap，这对我们的使用没有影响。</p>
</blockquote>
<p>在 shader 中，我们根据像素坐标从图片中取色，注意需要从图的上半部分和下半部分各取一个颜色，然后根据一定规则拼起来即可。</p>
<pre><code class="lang-glsl">precision mediump float;

uniform vec2 uResolution;
uniform sampler2D uImage;

void main(){

    vec2 st = gl_FragCoord.xy / uResolution;

    vec4 c2 = texture2D(uImage, vec2(st.x, st.y*0.5));      // 取 A​lpha 通道
    vec4 c1 = texture2D(uImage, vec2(st.x, st.y*0.5+0.5));  // 取 RGB 通道

    gl_FragColor = vec4(c1.xyz, c2.r &gt; 0.6 ? c2.r : 0.0);
}
</code></pre>
<p>png 图片转化为 jpg 图片的过程，可以很轻松地在浏览器里操作 canvas 完成（示例），也可以借助一些其他的工具完成。</p>
<h1 id="-">会动的背景</h1>
<p>首先，我们注意到，原页面的背景是在红色的渐变之上，随机散布着一些黄色的氛围小碎片。红色渐变背景和这些小碎片全部画在一张静态 jpg 图片上，如下图（1.原图）所示。</p>
<p><img src="https://img.alicdn.com/tfs/TB16JUjp1uSBuNjy1XcXXcYjFXa-700-1256.jpg" alt=""></p>
<p>在复刻前，我把原页面用到的图片分为了两类，图案（pattern）性质和图片（image）性质。Pattern 性质的图片，本身并不传递信息，通常用作底纹，氛围等场景；而 image 性质的图片则是信息的载体。</p>
<p>这张图片明显是 pattern 性质的，这类图片往往尺寸大，体积也较大（尤其是半透明图案）。其实，这些图案完全可以用 Shader 「手绘」出来，这样就不用去加载此图片了。
用 Shader 绘制图案的另一个好处是，图案可以有规律地动起来。在这个例子中，如果碎片能像天女散花一般洒下来，那就太棒了，对吧？但是熟悉前端动画的同学，一定会想到，这么多粒子组成的动画，如果用纯 CSS 或者 canvas 2d 来做的话，性能肯定好不了，粒子越多，动画的性能越差。用 WebGL 和 shader 来做粒子动画则不会因为粒子数量的增多而导致性能变差。</p>
<p>我们来看看如何用 Shader 绘制这些碎片。</p>
<pre><code class="lang-glsl">vec2 random2(vec2 st){
  st = vec2( dot(st,vec2(127.1,311.7)),
            dot(st,vec2(269.5,183.3)));
  st = -1.0 + 2.0*fract(sin(st)*43758.5453123);
  return st;
}


float noise2(vec2 ist, vec2 fst){
  vec2 g1 = random2(ist+vec2(0.0, 0.0));
  vec2 g2 = random2(ist+vec2(1.0, 0.0));
  vec2 g3 = random2(ist+vec2(0.0, 1.0));
  vec2 g4 = random2(ist+vec2(1.0, 1.0));

  vec2 f1 = fst - vec2(0.0, 0.0);
  vec2 f2 = fst - vec2(1.0, 0.0);
  vec2 f3 = fst - vec2(0.0, 1.0);
  vec2 f4 = fst - vec2(1.0, 1.0);

  float p1 = dot(g1, f1);
  float p2 = dot(g2, f2);
  float p3 = dot(g3, f3);
  float p4 = dot(g4, f4);

  fst = smoothstep(0.0, 1.0, fst);

  float p = mix(
    mix(p1, p2, fst.x),
    mix(p3, p4, fst.x),
    fst.y
  );

  return p;
}


float inFrag(){
    vec2 st = gl_FragCoord.xy / uResolution.xx;
    st = st * 60.0;
    float res = noise2(floor(st), fract(st));
    return res;
}

void main(){
    float pct = inFrag();
    gl_FragColor = vec4(vec3(pct), 1.0);
}
</code></pre>
<p>首先我们要借助一个梯度噪声函数 noise2（参考此教程），对每个像素而言，把像素坐标输入，这个函数则会输出一个灰度值。此函数输出的图像大致如上图 （2.梯度噪声）所示。
如果你对诸如「噪声函数」的原理感到陌生，其实也没太大关系。你可以在社区找到大量各种各样的开箱即用的功能函数，只需要知道它们的效果是什么，而不必太拘泥于其内部的原理。
显然，图 2.梯度噪声 和我们设想的还有差距。接下来，我们用一个筛子把亮度大于某个阈值的点筛出来：</p>
<pre><code class="lang-glsl">function initFrag(){
    ...
    res = step(0.5, res);
    return res;
}
</code></pre>
<p>这样，用 step 函数直接把大于 0.5 的点筛出来。可是这样做容易产生锯齿，为了使碎片的边缘比较平滑，所以我们用 smoothsStep 函数进行截取。</p>
<pre><code class="lang-glsl">res = smoothstep(0.35, 0.5, res);
</code></pre>
<p>这样，我们就得到了图 3.拉伸的结果。</p>
<p>图 3 只是一张灰度图，我们使用这个灰度混合红色和黄色，使之得到一张彩色的图。</p>
<pre><code class="lang-glsl">vec3 bgColor(){
    float y = gl_FragCoord.y / uResolution.y;
    vec3 c1 = vec3(0.96, 0.02, 0.16);
    vec3 c2 = vec3(0.96, 0.25, 0.21);
    return mix(c1, c2, y);
}

void main(){
    ...

    vec3 cRed = bgColor();
    vec3 cYello = vec3(0.96, 0.70, 0.26);

    gl_FragColor = vec4(mix(cRed, cYello, pct), 1.0);
}
</code></pre>
<p>这里 bgColor 方法返回红色，由于红色背景仍然是有一点垂直渐变色效果的，所以这里也要额外用两种不同的红色进行混合（混合系数和像素坐标的 Y 值相关），处理成渐变色。</p>
<p>此时我们的结果和原图的意图还有些不同：</p>
<ul>
<li>原图中，页面下半部分的碎片比较透明度，越往页面下方，碎片就越透明（融入了红色背景）。</li>
<li>原图中，中间圈圈部分（即红色窗格占据的部分）没有碎片。</li>
<li>原图中，碎片的分布没有这么均匀，常有一小块区域完全没有碎片的情况，似乎有一种尺寸更大的随机变量在影响。</li>
</ul>
<p>从以上三点出发，我们制作了 3 个通道，并依次叠加（如图 5，图 6，图 7）所示，最终得到如 图 7 所示。将叠加后的结果与图 3 进行叠加，也就是说，图 3 中被筛出的点，如果在图 7 中是较暗的，则也会被降低亮度。再使用这一步的结果进行混色，最终得到图 8 的效果。</p>
<pre><code class="lang-glsl">void main() {

    float pct = inFrag();
    pct = min(pct, yFactor());
    pct = min(pct, rFactor());
    pct = min(pct, mFactor());

    ...
}
</code></pre>
<p>下面，我们来使碎片动起来（洒下来）。在生成碎片的时候，传入噪音函数的坐标数据中，加上和时间有关的偏移量：</p>
<pre><code class="lang-glsl">float inFrag(){
    vec2 st = gl_FragCoord.xy / uResolution.xx;
    st = st * 60.0;
    st.y += uTime * 2.0;  // 增加与时间相关的偏移量
    float res = noise2(floor(st), fract(st));
    res = smoothstep(0.35, 0.5, res);
    return res;
}
</code></pre>
<p>最后，为了更出色的效果，我这里做了两个碎层碎片，两层碎片具有不同的下落速度，形成一些视差效果。</p>
<pre><code class="lang-glsl">void main() {

    float pct = inFrag();
    pct = min(pct, yFactor());
    pct = min(pct, rFactor());
    pct = min(pct, mFactor());

    float pct2 = inFrag2();
    pct2 = min(pct2, yFactor());
    pct2 = min(pct2, rFactor());
    pct2 = min(pct2, mFactor());

    pct = max(pct, pct2);

    ...
}
</code></pre>
<p>这样，就在完全不依赖外部资源的情况下，仅用 Shader 直接绘制，制作出了氛围碎片的效果。</p>
<h1 id="-">手绘图案</h1>
<p>原页面中有一个圆形的窗格，这个窗格也是画在一张透明图片上。不知读者是否注意到，在复刻后的页面中，这个窗格是用 shader 直接画出来的。</p>
<p><img src="https://img.alicdn.com/tfs/TB10Tp.qntYBeNjy1XdXXXXyVXa-400-363.jpg" alt=""></p>
<p>实际上，这种复杂程度的窗格，也可以归为图案（pattern）一类，shader 是完全可以直接画出来的。下面，我们就来看看用 shader 如何来画窗格。
窗格是由线组成的，其基本单元是线。首先我们看一下是如何画线的：</p>
<pre><code class="lang-glsl">// 绘制线的函数 veins
float line(float e, float w, float d, float p){
    float e1 = e - w/2.0;
    float e2 = e + w/2.0;
    return smoothstep(e1 - d / 2.0, e1 + d / 2.0, p) * 
            smoothstep(e2 + d / 2.0, e2 - d / 2.0, p);
}

// 绘制网格
vec3 veins(){
    float r = uResolution.x * 0.4;
    vec2 center = vec2(uResolution.x/2.0, uResolution.y-r-5.0);
    vec2 st = gl_FragCoord.xy - center;
    st /= uResolution.x * 0.5;

    float p = line(0.0, 0.3, 0.2, st.x);

    return mix(veinsBgColor, veinsFgColor, p);
}

// 主函数
void main(){
    vec3 res = veins();

    gl_FragColor = vec4(vec3(res), 1.0);
}
</code></pre>
<p>main 函数调用 veins 函数，veins 又调用 line 函数得到一个灰度值，然后混合两种颜色。上述程序的结果如下图所示。</p>
<p><img src="https://img.alicdn.com/tfs/TB1ctq.p3mTBuNjy1XbXXaMrVXa-400-430.jpg" alt=""></p>
<p>解释一下几个参数：p 是当前像素的 x 或 y 坐标值（取决于横线还是竖线，如果是横线为 y 坐标值，如果为竖线为 x 坐标值），e 则是所绘制的直线所在的坐标。w 指线的宽度，而 d 指在线与非线的交界处，用来平滑的区域的宽度。</p>
<blockquote>
<p>在上面的代码中，w 取了 0.3，而 d 取了 0.2，线看上去很粗。后面，我们会把这两个值固定在 0.035 和 0.003 上。</p>
</blockquote>
<p>由于窗格图案中包含多跟线，我们需要多次调用 line 函数，并得到一个一个灰度值。如果当前像素在「任意一个」 line 函数中返回了大于 0 的灰度值，我们就认为这个像素是在图案上的。换言之，我们取多次 line 函数返回的灰度值中最大的那个值，作为最后的灰度值来计算颜色。代码如下所示：</p>
<pre><code class="lang-glsl">float maxList(float list[20]){
    float res = list[0];
    for(int i=0; i&lt;20; i++){
        if(list[i]&gt;res){
            res = list[i];
        }
    }
    return res;
}

vec3 veins(){
    ...

    float p = 0.0;
    float pl[20];
    pl[0] = line(0.29, 0.035, 0.003, st.x);
    pl[1] = line(0.58, 0.035, 0.003, st.x);
    ...
    pl[7] = line(-0.58, 0.035, 0.003, st.y);

    p = maxList(pl);

    ...
}
</code></pre>
<p>我们计算了 8 根直线，得到的结果如下图 2 所示。</p>
<p><img src="https://img.alicdn.com/tfs/TB1ltq.p3mTBuNjy1XbXXaMrVXa-700-1105.jpg" alt=""></p>
<p>拆解图案，我们发现光有直线还不能满足要求，还需要有射线和矩形框。同样，我们引入射线 ray 和矩形框 box 函数。</p>
<pre><code class="lang-glsl">float rayV(vec2 ep, float w, float d,  float dir, vec2 st){
    float pct = line(ep.x, w, d, st.x);
    if((st.y - ep.y) * dir &lt; 0.0){
        pct = 0.0;
    }
    return pct;
}

float rayH(vec2 ep, float w, float d,  float dir, vec2 st){
    float pct = line(ep.y, w, d, st.y);
    if((st.x - ep.x)* dir &lt; 0.0){
        pct = 0.0;
    }
    return pct;
}

float box(vec2 center, float width, float height, float w, float d, vec2 st){

    float l1 = line(center.x, width+w, d, st.x);
    float l2 = line(center.y, height+w, d, st.y);

    float inBox = l1*l2;
    float plist[20];

    plist[0] = line(center.x+width*0.5, w, d, st.x);
    plist[1] = line(center.x-width*0.5, w, d, st.x);
    plist[2] = line(center.y+height*0.5, w, d, st.y);
    plist[3] = line(center.y-height*0.5, w, d, st.y);

    float p = maxList(plist);
    p *= inBox;
    return p;
}
</code></pre>
<p>然后依次向图案中增加内容，得到图 4，图 6 的效果。通过最终的叠加，得到了图 7 的效果。代码如下（不要被密密麻麻的浮点数吓住了，其实都是一些固定的坐标而已，有意义的值只有几个，通过正负号进行组合形成图案）：</p>
<pre><code class="lang-glsl">    float p = 0.0;
    float pl[20];
    pl[0] = line(0.29, 0.035, 0.003, st.x);
    pl[1] = line(0.58, 0.035, 0.003, st.x);
    pl[2] = line(-0.29, 0.035, 0.003, st.x);
    pl[3] = line(-0.58, 0.035, 0.003, st.x);
    pl[4] = line(0.29, 0.035, 0.003, st.y);
    pl[5] = line(0.58, 0.035, 0.003, st.y);
    pl[6] = line(-0.29, 0.035, 0.003, st.y);
    pl[7] = line(-0.58, 0.035, 0.003, st.y);

    pl[8] = rayV(vec2(0.0, 0.29), 0.035, 0.003, 1.0, st);
    pl[9] = rayV(vec2(0.0, -0.29), 0.035, 0.003, -1.0, st);
    pl[10] = rayH(vec2(0.29, 0.0), 0.035, 0.003, 1.0, st);
    pl[11] = rayH(vec2(-0.29, 0.0), 0.035, 0.003, -1.0, st);

    p = maxList(pl);

    float pl2[20];

    pl2[0] = box(vec2(0.0, 0.0), 0.39, 0.39, 0.035, 0.003, st);

    pl2[1] = box(vec2(0.29, 0.29), 0.39, 0.39, 0.035, 0.003, st);
    pl2[2] = box(vec2(-0.29, 0.29), 0.39, 0.39, 0.035, 0.003, st);
    pl2[3] = box(vec2(-0.29, -0.29), 0.39, 0.39, 0.035, 0.003, st);
    pl2[4] = box(vec2(0.29, -0.29), 0.39, 0.39, 0.035, 0.003, st);

    pl2[5] = box(vec2(0.58, 0.0), 0.39, 0.39, 0.035, 0.003, st);
    pl2[6] = box(vec2(-0.58, 0.0), 0.39, 0.39, 0.035, 0.003, st);
    pl2[7] = box(vec2(0.0, 0.58), 0.39, 0.39, 0.035, 0.003, st);
    pl2[8] = box(vec2(0.0, -0.58), 0.39, 0.39, 0.035, 0.003, st);

    pl2[9] = box(vec2(0.58, 0.58), 0.39, 0.39, 0.035, 0.003, st);
    pl2[10] = box(vec2(-0.58, 0.58), 0.39, 0.39, 0.035, 0.003, st);
    pl2[11] = box(vec2(-0.58, -0.58), 0.39, 0.39, 0.035, 0.003, st);
    pl2[12] = box(vec2(0.58, -0.58), 0.39, 0.39, 0.035, 0.003, st);

    p = max(p, maxList(pl2));
</code></pre>
<p>得到图 7 的图案后，我们还需要为其蒙上一层阴影（可对比原图），这样后面裁切的时候会有一些立体感。</p>
<pre><code class="lang-glsl">float shadow(){
    float r = uResolution.x * 0.4;
    vec2 center = vec2(uResolution.x/2.0, uResolution.y-r-5.0);
    vec2 st = gl_FragCoord.xy - center;
    st /= uResolution.x * 0.5;

    return smoothstep(0.9, 0.3, st.y+0.5*st.x*st.x-0.1);
}

vec3 veins(){
    return mix(veinsBgColor, veinsFgColor, p)*shadow();
}
</code></pre>
<p>这里为了方便，使用了一个开口朝下，中轴和 y 轴重合的抛物线（st.y + 0.5<em>st.x</em>st.x - 0.1）来模拟圆形的阴影。这样我们就得到了图 8。</p>
<p>最后，原设计稿中红色边框和透明背景的效果，对整个图像进行了两次裁切。裁切掉的部分，分别用红色和透明色来填充。依次得到图 9 和 图 10 的结果。图 10 也就是最终的结果。</p>
<pre><code class="lang-glsl">vec3 circle(vec3 veinsColor){

    float r = uResolution.x * 0.4;    
    vec2 center = vec2(uResolution.x/2.0, uResolution.y-r-5.0);

    vec2 dxy = gl_FragCoord.xy - center;
    float dist = sqrt(dxy.x*dxy.x+dxy.y*dxy.y);

    float p = dist/r;
    p = smoothstep(0.95, 0.96, p);

    return mix(veinsColor, borderColor, p);
}

vec4 clip(vec3 color){
    float r = uResolution.x * 0.4;    
    vec2 center = vec2(uResolution.x/2.0, uResolution.y-r-5.0);

    vec2 dxy = gl_FragCoord.xy - center;
    float dist = sqrt(dxy.x*dxy.x+dxy.y*dxy.y);

    float p = smoothstep(1.0, 1.02, dist/r);

    return vec4(color, 1.0-p);
}


void main(){
    vec3 res = veins();
    res = circle(res);

    gl_FragColor = clip(res);
}
</code></pre>
<h1 id="-">结语</h1>
<p>通过上面三个例子，可以看到，合理地使用 webgl 可以对页面进行精雕细琢的优化，可以减少对图片的依赖，避免使用大尺寸的透明图层，可以做一些全局性/背景性的动画效果。由于 webgl 是给了开发者「逐个像素」进行着色的能力，开发者可以非常灵活地使用 shader 来做事情。所以说，灵活地使用 shader ，可以帮助你把页面变得更小，更炫，更快。</p>
<p>其实复刻后的页面里还有一些其他用 shader 完成的小玩意儿，比如底部 loading bar 的动态颜色渐变，以及中部文字「魅族手机祝你新春快乐」上掠过的高光，因为点比较小，用到的技术也比较简单，就不再详细介绍了。</p>
<p>（完）</p>
]]></description>
            <link>http://xieguanglei.github.io/post/using-shader-to-optimize-page.html</link>
            <guid isPermaLink="false">using-shader-to-optimize-page</guid>
            <dc:creator><![CDATA[谢光磊]]></dc:creator>
            <pubDate>Thu, 10 May 2018 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[G3D —— Hybrid 环境下的 WebGL 3D 渲染引擎]]></title>
            <description><![CDATA[<h1 id="g3d-hybrid-webgl-3d-">G3D —— Hybrid 环境下的 WebGL 3D 渲染引擎</h1>
<blockquote>
<p>G3D 是一款开源 3D 渲染引擎，目前由我开发和维护。这篇宣传最初发表于<a href="http://taobaofed.org/blog/2018/03/05/intro-to-g3d/">淘宝前端团队博客</a>。这里是个人博客上保存的一份备份。</p>
</blockquote>
<p>G3D 是一款基于 WebGL 的 JavaScript 3D 渲染引擎，借助 GCanvas，G3D 可以运行在 Weex，ReactNative 等 hybrid 环境下。G3D 由淘宝终端团队推出，并于 2018 年 3 月与 GCanvas 同时宣布正式开源。</p>
<p>那么就会有同学问了，G3D 和 three.js 有什么不同呀？G3D 和 GCanvas 究竟是什么关系啊？这篇文章，就聊一聊 G3D 这个产品的来龙去脉。</p>
<p><a href="https://alibaba.github.io/G3D/">G3D 官网</a>，<a href="https://alibaba.github.io/GCanvas/">GCanvas 官网</a></p>
<h2 id="-g3d">为什么有 G3D</h2>
<p>G3D 的起源要从 GCanvas 说起。</p>
<p>GCanvas 在 Weex 和 ReactNative 环境下提供了浏览器环境中 Canvas 的绘图能力，手机淘宝 App 的 Weex 容器已经内置了 GCanvas。和 Canvas 一样，GCanvas 的绘图能力包括 2d 上下文和 webgl 上下文的绘图能力。2d 上下文相对较为简单，可以直接拿来使用；而 webgl 上下文比较复杂，从 webgl API 到真正的 3d 应用之间往往还需要一层 3d 渲染引擎，社区中的 three.js，babylon.js 等就是这类 3d 渲染引擎中的翘楚。</p>
<p>GCanvas 开发团队曾尝试把 three.js 和 babylon.js 接入到 GCanvas 环境中来，遇到了一些困难：</p>
<ul>
<li>社区中的 webgl 渲染引擎依赖了大量的 DOM API 和原生对象，在 Weex 与 ReactNative 环境中不存在这些 API 与原生对象。开发团队也曾尝试对 Babylon.js 和 three.js 进行改造，但发现成本比较高，而且后续跟进原版项目 bugfix 与功能迭代的难度也比较大。</li>
<li>如 GCanvas 文档所述， GCanvas 目前仅支持 WebGL API 的一个子集。直接引入 Babylon.js 和 three.js，在 GCanvas环境下还暂时无法正常工作。</li>
<li>由于 three.js 和 babylon.js 的体积已经比较巨大，其中很多功能在手机淘宝的业务场景中暂时用不到。因此，即使能够成功改造，巨大的 js 体积也会拖垮手淘中很多页面的性能。</li>
</ul>
<p>所以，GCanvas 开发团队决定从零开始开发一个小型的 WebGL 渲染引擎 G3D，并以此作为 GCanvas 3D 能力的辅助。可以预见，G3D 和 GCanvas WebGL 将会是相辅相成，互相促进，共同发展；并且在较长一段时间内，G3D 将是使用 GCanvas WebGL 能力，除了直接操作原生 WebGL API 之外的唯一选择。</p>
<h2 id="g3d-">G3D 有哪些功能</h2>
<p>G3D 具有 3D 渲染引擎的基本功能：</p>
<ul>
<li>定义场景，定义透视相机。</li>
<li>光照方面，目前支持 1)环境光；2)平行光；3)点光；4)穹顶光。</li>
<li>材质方面，目前支持 1)基于冯氏反射模型的冯式面材质（朗伯面是冯氏面的一种特殊情况）；2) 非光照材质。</li>
<li>几何体方面，目前支持直接创建的几何体包括立方体，球体，圆柱，圆锥，折线；当然更多情况下是可以通过解析模型数据创建几何体。</li>
<li>模型解析方面，目前支持 1) OBJ/MTL 模型；2) STL 模型这两种模型格式。</li>
<li>交互：支持 3D点选/拖拽（由于 GCanvas framebuffer 仍未正常，此功能仅在浏览器中有效）。</li>
<li>动画：支持骨骼动画和蒙皮动画。</li>
</ul>
<p>值得注意的是，由于 G3D 需要运行在 Hybrid 环境下，无法依赖 DOM API，所以与 three.js，babylon.js 等浏览器环境的引擎相比，G3D 无法支持诸如声音播放，文件加载等非渲染核心功能。举例来说，如果使用 three.js 加载模型，只需要调用相关方法传入模型的 url 即可，three.js 会自动加载和解析模型；但在使用 G3D 时，你需要手动获取该文件的内容（Hybrid 与浏览器会不一样），然后将内容字符串传入 G3D.MeshBuilder 的相关方法。</p>
<h2 id="g3d-">G3D 的未来</h2>
<p>目前 G3D 已经在淘宝 3D 定制等业务中有所使用，在未来的半年到一年里，G3D 主要的目的有两个：</p>
<ul>
<li>追赶 Babylon.js 和 three.js 的高阶功能，如阴影、Shader材质、预处理、法线纹理、光线追踪等等，在其过程中推动 GCanvas WebGL 的完善，同时赋能业务和社区。</li>
<li>进一步打通 G3D 与建模-动画工具链的通道，完善模型-材质数据结构，提升渲染效果，达到「（Blender 等工具中）所见即（G3D渲染出）所得」的开发体验，最大程度地降低 3D 项目的开发成本。</li>
</ul>
]]></description>
            <link>http://xieguanglei.github.io/post/about-g3d.html</link>
            <guid isPermaLink="false">about-g3d</guid>
            <dc:creator><![CDATA[谢光磊]]></dc:creator>
            <pubDate>Wed, 07 Mar 2018 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Dalaran —— 开箱即用的 Webpack]]></title>
            <description><![CDATA[<h1 id="dalaran-webpack">Dalaran —— 开箱即用的 Webpack</h1>
<p>不知不觉已经到了 2018 年，Webpack / Babel 早已是前端标配。但是每次新开一个项目，都要重新配置一遍环境，实在是痛苦不堪。然而每个项目的情况，并不存在一个包治百病的 Webpack 配置，而且有时开发环境里还需用到 Webpack 之外的其他工具。所以，我花了一些时间开发了一个开箱即用的 Webpack 任务工厂，既能够减少配置 Webpack 及周边工具的痛苦，又保持了相当的灵活性。我把这个工具命名为 dalaran （达拉然）。</p>
<p>工具地址：<a href="https://github.com/xieguanglei/dalaran">github</a> <a href="https://www.npmjs.com/package/dalaran">dalaran</a></p>
<p><strong>以下是 Dalaran 中文文档：</strong></p>
<p>Dalaran 是一个帮助你简化 Webpack 配置的轻量级工具。与其他重量级开发环境框架相比，dalaran 把「定义自己开发流程」的权力交还给了你自己，你需要使用 <a href="https://gulpjs.com/">Gulp</a> 来管理任务。</p>
<blockquote>
<p>Dalaran（达拉然）的名字来源于网络游戏「魔兽世界」中的魔法城市，达拉然。</p>
</blockquote>
<p>下面是使用文档：</p>
<p>Dalaran 可以帮助你做：</p>
<ul>
<li>对 webpack 配置默认的 loader 和 plugin，对 babel 配置默认的 preset。</li>
<li>根据默认或者自定义的规则找到入口文件和打包目录。</li>
<li>无需配置（或少量配置）即可在 karma 和 chrome 里运行测试用例。</li>
<li>无需配置（或自定义配置）即可使用 eslint 检查代码拼写。</li>
<li>使用 webpack-dev-middleware 和 express 提供开发环境。</li>
<li>在发布模块或部署脚本之前，对代码进行编译或打包。</li>
</ul>
<h2 id="-">使用方法</h2>
<p>基本上，你可以使用 dalaran 来：</p>
<ul>
<li>开发一个前端应用（Application）。</li>
<li>开发一个前端库（Library）。</li>
</ul>
<p>你需要进行的任务包括开发（dev），构建（build）/编译（compile），测试（test）。推荐使用 gulp 来管理这些任务。</p>
<p>你的 gulpfile 大概是这样的：</p>
<pre><code class="lang-javascript">const gulp = requir(&#39;gulp&#39;);
const dalaran = requre(&#39;dalaran&#39;);

const libTasks = dalaran.libraryTasks({...options});

gulp.task(&#39;dev&#39;, libTasks.dev);
gulp.task(&#39;test&#39;, libTasks.test);

gulp.task(&#39;prepare&#39;, function(){
    // 自定义的任务
})
</code></pre>
<h2 id="-library-">开发一个前端库（Library）</h2>
<p>Dalaran 为开发前端库提供了 4 个任务：dev，build，compile 和 test。</p>
<p>调用 <code>tasks.libraryTasks(options)</code> 来创建这些任务。</p>
<h3 id="options">options</h3>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
<th>类型</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>port</td>
<td>开发服务器端口</td>
<td>Number</td>
<td>3000</td>
</tr>
<tr>
<td>base</td>
<td>项目的根目录</td>
<td>Sting</td>
<td>process.cwd()</td>
</tr>
<tr>
<td>entry</td>
<td>前端库的入口文件</td>
<td>String</td>
<td>&#39;./src/index.js&#39;</td>
</tr>
<tr>
<td>src</td>
<td>源码目录</td>
<td>String</td>
<td>&#39;./src&#39;</td>
</tr>
<tr>
<td>lib</td>
<td>编译（为 es5 以发布到 npm）后代码存放目录</td>
<td>String</td>
<td>&#39;./lib&#39;</td>
</tr>
<tr>
<td>demo</td>
<td>demo 页目录（用于开发或功能演示）</td>
<td>String</td>
<td>&#39;./demo&#39;</td>
</tr>
<tr>
<td>dist</td>
<td>构建产物存放目录（UMD 类文件）</td>
<td>String</td>
<td>&#39;./dist&#39;</td>
</tr>
<tr>
<td>umdName</td>
<td>UMD 库名</td>
<td>String</td>
<td>&#39;foo&#39;</td>
</tr>
<tr>
<td>devSuffix</td>
<td>开发环境打包后文件的后缀名（除外<code>.js</code>）</td>
<td>String</td>
<td>&#39;bundle&#39;</td>
</tr>
<tr>
<td>buildSuffix</td>
<td>构建时打包后文件的后缀名（除外<code>.js</code>）</td>
<td>String</td>
<td>&#39;min&#39;</td>
</tr>
<tr>
<td>react</td>
<td>是否转译 JSX</td>
<td>Boolean</td>
<td>false</td>
</tr>
<tr>
<td>loaders</td>
<td>额外的自定义 webpack loaders</td>
<td>Array</td>
<td>[]</td>
</tr>
<tr>
<td>plugins</td>
<td>额外的自定义 webpack plugins</td>
<td>Array</td>
<td>[]</td>
</tr>
<tr>
<td>babelPolyfill</td>
<td>是否需要引入 babelPolyfill</td>
<td>Boolean</td>
<td>false</td>
</tr>
<tr>
<td>devCors</td>
<td>开发服务器是否开启资源跨域</td>
<td>Boolean</td>
<td>true</td>
</tr>
<tr>
<td>watchTest</td>
<td>测试任务是否为 watch 模式</td>
<td>Boolean</td>
<td>false</td>
</tr>
<tr>
<td>testEntryPattern</td>
<td>测试文件的路径模式</td>
<td>String</td>
<td>&#39;src/<em>*/</em>.spec.js&#39;</td>
</tr>
<tr>
<td>eslint</td>
<td>是否开启 eslint</td>
<td>Boolean</td>
<td>true</td>
</tr>
</tbody>
</table>
<h3 id="-">目录结构</h3>
<p>默认情况下，项目的目录结构大致如下所示：</p>
<pre><code>project
│   README.md
│   package.json
│   gulpfile.js
└───demo
│       foo.html
│       foo.js
│       bar.html
│       bar.js
└───dist
│       foo.min.js
└───lib
│   │   index.js
│   └───foo
│           foo.js
└───src
    │   index.js
    └───foo
            foo.js
            foo.spec.js
</code></pre><h3 id="dev-">dev 任务</h3>
<pre><code>gulp.task(&#39;dev&#39;, libTasks.dev);
</code></pre><p>将需要调试的 demo 页面放置在默认为 &#39;./demo&#39; 的目录下。具有相同名称的 html 和 js 文件即可以构成一个 demo 页面，比如 <code>foo.html</code> 和 <code>foo.js</code> 就组成了名为 <code>foo</code> 的 demo 页面。HTML 文件大致如下所示：</p>
<pre><code class="lang-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;script src=&quot;./foo.bundle.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>你可以任意更改该 html 文件，唯一需要记住的是，页面需要包含如下 script 标签 <code>&lt;script src=&quot;/foo.bundle.js&quot;&gt;&lt;/script&gt;</code>，也就是以 <code>foo.js</code> 为入口打包出的文件。后缀名 <code>bundle</code> 可以在 <code>devSuffix</code> 中修改。</p>
<p><code>foo.js</code> 大致如下所示：</p>
<pre><code>import MyLib from &#39;../src/index&#39;;
// demo code
</code></pre><p>运行 <code>gulp dev</code>，dalaran 会自动打开你的浏览器并打开 <code>http://127.0.0.1:3000</code> （如果你不指定其他端口的话），此时你会看到你的 demo 页面列表。</p>
<p>点击 demo 页面的 <code>link</code> 链接，就可以进入开发调试环境了。</p>
<p>注意，eslint 是默认开启的，dalaran 提供了一份默认的 eslint 配置。如果你在根目录下放置了一个自定义的 .eslintrc，则会覆盖默认的配置。</p>
<h3 id="test-">test 任务</h3>
<p>通过配置 <code>testEntryPattern</code> 参数，dalaran 可以在 Karma 和 Chrome 里运行测试用例。测试文件的示例（比如 <code>foo.spec.js</code>）如下所示：</p>
<pre><code class="lang-javascript">import expect from &#39;expect&#39;;
import MyLib from &#39;../src/index&#39;;

describe(&#39;mylib&#39;, function () {

    it(&#39;mylib should be ok&#39;, function(){
        expect(!!MyLib).toBeTruthy();
    });

});
</code></pre>
<p>运行 <code>gulp test</code> 测试结果会输出到命令行。</p>
<h3 id="build-">build 任务</h3>
<pre><code class="lang-javascript">gulp.task(&#39;build&#39;, libTasks.build);
</code></pre>
<p>运行 <code>gulp build</code> 将会以模块的入口文件（默认为&#39;./src/index.js&#39;）打包出一个 UMD 风格的 js 文件并放置在 <code>dist</code> 目录下。你需要提供一个 <code>umdName</code> 选项，该文件将被命名为 <code>${umdName.toLowercase()}.${buildSuffix}.js</code>。如果你通过 script 标签加载并运行该 js 文件，就可以使用 <code>window.${umdName}</code> 变量获取到该模块。</p>
<h3 id="compile-">compile 任务</h3>
<pre><code class="lang-javascript">gulp.task(&#39;build&#39;, libTasks.build);
</code></pre>
<p>如果你的源码仅包含 js 文件（也就是说，你不会通过一些额外的 loader 来加载 <code>.less</code>, <code>.txt</code>, <code>.jpg</code> 等文件），你就可以将 es6 / jsx 代码编译为 es5，然后发布到 npm 上供他人进一步使用。这样做的好处是，如果你的库依赖了其他 npm 库，就不会将其打包进去（UMD 则会）。编译后的文件，被放置在 <code>lib</code> 目录下（你可以通过 <code>lib</code> 选项来修改）。</p>
<p>运行 <code>gulp compile</code>, 编译任务会很快完成。</p>
<h2 id="-application-">开发一个前端应用（Application）</h2>
<p>Dalaran 为开发前端应用提供了 3 个任务：dev，build 和 test。</p>
<p>你需要调用 <code>tasks.applicationTasks(options)</code> 来创建这些任务。</p>
<h3 id="options">options</h3>
<table>
<thead>
<tr>
<th>name</th>
<th>description</th>
<th>type</th>
<th>default</th>
</tr>
</thead>
<tbody>
<tr>
<td>port</td>
<td>开发服务器端口</td>
<td>Number</td>
<td>3000</td>
</tr>
<tr>
<td>base</td>
<td>项目的根目录</td>
<td>Sting</td>
<td>process.cwd()</td>
</tr>
<tr>
<td>src</td>
<td>源码目录</td>
<td>String</td>
<td>&#39;./src&#39;</td>
</tr>
<tr>
<td>demo</td>
<td>应用的页面目录</td>
<td>String</td>
<td>&#39;./demo&#39;</td>
</tr>
<tr>
<td>dist</td>
<td>构建产物存放目录</td>
<td>String</td>
<td>&#39;./dist&#39;</td>
</tr>
<tr>
<td>devSuffix</td>
<td>开发环境打包后文件的后缀名（除外<code>.js</code>）</td>
<td>String</td>
<td>&#39;bundle&#39;</td>
</tr>
<tr>
<td>buildSuffix</td>
<td>构建时打包后文件的后缀名（除外<code>.js</code>）</td>
<td>String</td>
<td>&#39;bundle&#39;</td>
</tr>
<tr>
<td>react</td>
<td>是否转译 JSX</td>
<td>Boolean</td>
<td>false</td>
</tr>
<tr>
<td>loaders</td>
<td>额外的自定义 webpack loaders</td>
<td>Array</td>
<td>[]</td>
</tr>
<tr>
<td>plugins</td>
<td>额外的自定义 webpack plugins</td>
<td>Array</td>
<td>[]</td>
</tr>
<tr>
<td>babelPolyfill</td>
<td>是否需要引入 babelPolyfill</td>
<td>Boolean</td>
<td>false</td>
</tr>
<tr>
<td>devCors</td>
<td>开发服务器是否开启资源跨域</td>
<td>Boolean</td>
<td>true</td>
</tr>
<tr>
<td>watchTest</td>
<td>测试任务是否为 watch 模式</td>
<td>Boolean</td>
<td>false</td>
</tr>
<tr>
<td>testEntryPattern</td>
<td>测试文件的路径模式</td>
<td>String</td>
<td>&#39;src/<em>*/</em>.spec.js&#39;</td>
</tr>
<tr>
<td>commonsChunk</td>
<td>是否开启 commonsChunk Plugin</td>
<td>Boolean</td>
<td>true</td>
</tr>
<tr>
<td>publicPath</td>
<td>应用部署路径的 path</td>
<td>String</td>
<td>&#39;./&#39;</td>
</tr>
<tr>
<td>eslint</td>
<td>是否开启 eslint</td>
<td>Boolean</td>
<td>true</td>
</tr>
</tbody>
</table>
<p>与开发前端库时的选项相比，有几点区别：</p>
<ol>
<li>不需要指定 entry 选项，入口会从 demo 目录内分析出来。</li>
<li>不需要提供 umdName 选项。</li>
<li>不需要提供 lib 目录。</li>
<li><code>buildSuffix</code> 的默认值是 <code>bundle</code> 而不是 <code>min</code>。</li>
<li>可以使用 <code>commonsChunk</code> 选项开启该插件。</li>
</ol>
<h3 id="-">目录结构</h3>
<p>项目的根目录的结构大致如下所示：</p>
<pre><code class="lang-bash">project
│   README.md
│   package.json
│   gulpfile.js
└───demo
│       foo.html
│       foo.js
│       bar.html
│       bar.js
└───dist
│       foo.html
│       foo.bundle.js
│       bar.html
│       bar.bundle.js
└───src
    │   index.js
    └───foo
            foo.js
            foo.spec.js
</code></pre>
<p>Compared with library tasks, there are 2 main differences. </p>
<p>与开发前端库相比，主要有两点区别：</p>
<ol>
<li>不再需要 lib 目录。</li>
<li>dist 目录中的内容，像是 demo 目录的映射一样。（开发前端库时，此目录下只有一个 UMD 文件）。</li>
<li>如果你开启了 commonsChunk 插件，则 html 中也需要包含该插件提取出的公共内容。就像这样：</li>
</ol>
<pre><code class="lang-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;script src=&quot;./commons.bundle.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;./foo.bundle.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="dev-">dev 任务</h3>
<p>Dev 任务与开发前端库时完全一致。</p>
<h3 id="test-">test 任务</h3>
<p>Test 任务与开发前端库时完全一致。</p>
<h3 id="build-">build 任务</h3>
<p>与开发前端库时相比，build 任务有些不同。此时，build 任务将会对 demo 目录下的每一个页面的入口 js 文件进行打包，同时也会将 html 文件复制到 dist 目录下。你可以将 dist 目录中打包后的 js 部署到静态资源服务器（比如使用内容分发网络）上，然后在自己的页面里加载这个 js 文件。当然，你也可以将整个 dist 目录部署在静态文件服务器上（比如使用 gh-pages），这也行得通。</p>
<blockquote>
<p>注意，开发前端应用时，是没有 compile 任务的。</p>
</blockquote>
<h2 id="-">如果你仍然有疑问</h2>
<p>你可以查看本仓库 <code>packages</code> 目录中的内容，该目录下有 4 个子目录，每一个都表示一个项目。你可以试着把它们运行起来，以了解 dalaran 是如何工作的。</p>
]]></description>
            <link>http://xieguanglei.github.io/post/dalaran-the-webpack-tool.html</link>
            <guid isPermaLink="false">dalaran-the-webpack-tool</guid>
            <dc:creator><![CDATA[谢光磊]]></dc:creator>
            <pubDate>Sat, 03 Mar 2018 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[编写「可读」代码的实践]]></title>
            <description><![CDATA[<h1 id="-">编写「可读」代码的实践</h1>
<p>编写<strong>可读</strong>的代码，对于以代码谋生的程序员而言，是一件极为重要的事。从某种角度来说，代码最重要的功能是<strong>能够被阅读</strong>，其次才是<strong>能够被正确执行</strong>。一段无法正确执行的代码，也许会使项目延期几天，但它造成的危害只是暂时和轻微的，毕竟这种代码无法通过测试并影响最终的产品；但是，一段能够正确执行，但缺乏条理、难以阅读的代码，它造成的危害却是深远和广泛的：这种代码会提高产品后续迭代和维护的成本，影响产品的稳定，破坏团队的团结（雾），除非我们花费数倍于编写这段代码的时间和精力，来消除它对项目造成的负面影响。</p>
<p>在最近的工作和业余生活中，我对「如何写出可读的代码」这个问题颇有一些具体的体会，不妨记录下来吧。</p>
<blockquote>
<p>JavaScript 是动态和弱类型的语言，使用起来比较「轻松随意」，在 IE6 时代，轻松随意的习惯确实不是什么大问题，反而能节省时间，提高出活儿的速度。但是，随着当下前端技术的快速发展，前端项目规模的不断膨胀，以往那种轻松随意的编码习惯，已经成为项目推进的一大阻力。</p>
<p>这篇文章讨论的是 ES6/7 代码，不仅因为 ES6/7 已经在大部分场合替代了 JavaScript，还因为 ES6/7 中的很多特性也能帮助我们改善代码的可读性。</p>
</blockquote>
<h2 id="-">变量命名</h2>
<p>变量命名是编写可读代码的基础。只有变量被赋予了一个合适的名字，才能表达出它在环境中的意义。</p>
<p>命名必须传递足够的信息，形如 <code>getData</code> 这样的函数命名就没能提供足够的信息，读者也完全无法猜测这个函数会做出些什么事情。而 <code>fetchUserInfoAsync</code> 也许就好很多，读者至少会猜测出，这个函数大约会远程地获取用户信息；而且因为它有一个 <code>Async</code> 后缀，读者甚至能猜出这个函数会返回一个 Promise 对象。</p>
<h3 id="-">命名的基础</h3>
<p>通常，我们使用名词来命名对象，使用动词来命名函数。比如：</p>
<pre><code>monkey.eat(banana)  // the money eats a banana
const apple = pick(tree)  // pick an apple from the tree
</code></pre><p>这两句代码与自然语言（右侧的注释）很接近，即使完全不了解编程的人也能看懂大概。</p>
<p>有时候，我们需要表示某种集合概念，比如数组或哈希对象。这时可以通过名词的复数形式来表示，比如用 <code>bananas</code> 表示一个数组，这个数组的每一项都是一个 <code>banana</code>。如果需要特别强调这种集合的形式，也可以加上 <code>List</code> 或 <code>Map</code> 后缀来显式表示出来，比如用 <code>bananaList</code> 表示数组。</p>
<blockquote>
<p>有些单词的复数形式和单数形式相同，有些不可数的单词没有复数形式（比如 data，information），这时我也会使用 <code>List</code> 等后缀来表示集合概念。</p>
</blockquote>
<h3 id="-">命名的上下文</h3>
<p>变量都是处在<strong>上下文</strong>（作用域）之内，变量的命名应与上下文相契合，同一个变量，在不同的上下文中，命名可以不同。举个例子，假设我们的程序需要管理一个动物园，程序的代码里有一个名为 <code>feedAnimals</code> 的函数来喂食动物园中的所有动物：</p>
<pre><code>function feedAnimals(food, animals){
  // ...
  // 上下文中有 bananas, peaches, monkey 变量
  const banana = bananas.pop();
  if(banana){
    monkey.eat(banana);
  } else {
    const peach = peaches.pop();
    monkey.eat(peach);
  }
  // ...
}
</code></pre><p>负责喂食动物的函数 <code>feedAnimals</code> 函数的主要逻辑就是：用各种食物把动物园里的各种动物喂饱。也许，每种动物能接受的食物种类不同，也许，我们需要根据各种食物的库存来决定每种动物最终分到的食物，总之在这个上下文中，我们需要关心食物的种类，所以传给 <code>money.eat</code> 方法的实参对象命名为 <code>banana</code> 或者 <code>peach</code>，代码很清楚地表达出了它的关键逻辑：「猴子要么吃香蕉，要么吃桃子（如果没有香蕉了）」。我们肯定不会这样写：</p>
<pre><code>// 我们不会这样写
const food = bananas.pop();
if(food){
  monkey.eat(food);
} else {
  const food = peaches.pop();
  monkey.eat(food);
}
</code></pre><p><code>Monkey#eat</code> 方法内部就不一样了，这个方法很可能是下面这样的（假设 <code>eat</code> 是 <code>Monkey</code> 的基类 <code>Animal</code> 的方法）：</p>
<pre><code>class Animal{
  // ...
  eat(food){
    this.hunger -= food.energy;
  }
  // ...
}

class Monkey extends Animal{ 
  // ... 
}
</code></pre><p>如代码所示，「吃」这个方法的核心逻辑就是根据食物的能量来减少动物（猴子）自身的饥饿度，至于究竟是吃了桃子还是香蕉，我们不关心，所以在这个方法的上下文中，我们直接将表示食物的函数形参命名为 <code>food</code>。</p>
<p>想象一下，假设我们正在编写某个函数，即将写一段公用逻辑，我们会选择去写一个新的功能函数来执行这段公用逻辑。在编写这个新的功能函数过程中，往往会受到之前那个函数的影响，变量的命名也是按照其在之前那个函数中的意义来的。虽然写的时候不感觉有什么阻碍，但是读者阅读的单元是函数（他并不了解之前哪个函数），会被深深地困扰。</p>
<h3 id="-">严格遵循一种命名规范的收益</h3>
<p>如果你能够时刻按照某种严格的规则来命名变量和函数，还能带来一个潜在的好处，那就是你再也不用<strong>记住</strong>哪些之前命名过（甚至其他人命名过）的变量或函数了。特定上下文中的特定含义只有一种命名方式，也就是说，只有一个名字。比如，「获取用户信息」这个概念，就叫作 <code>fetchUserInfomation</code>，不管是在早晨还是傍晚，不管你是在公司还是家中，你都会将它命名为 <code>fetchUserInfomation</code> 而不是 <code>getUserData</code>。那么当你再次需要使用这个变量时，你根本不用翻阅之前的代码或依赖 IDE 的代码提示功能，你只需要再<strong>命名</strong>一下「获取用户信息」这个概念，就可以得到 <code>fetchUserInfomation</code> 了，是不是很酷？</p>
<h2 id="-">分支结构</h2>
<p>分支是代码里最常见的结构，一段结构清晰的代码单元应当是像二叉树一样，呈现下面的结构。</p>
<pre><code>if (condition1) {
  if (condition2) {
    ...
  } else {
    ...
  }
} else {
  if (condition3) {
    ...
  } else {
    ...
  }
}
</code></pre><p>这种优美的结构能够帮助我们在大脑中迅速绘制一张图，便于我们在脑海中模拟代码的执行。但是，我们大多数人都不会遵循上面这样的结构来写分支代码。以下是一些常见的，在我看来可读性比较差的分支语句的写法：</p>
<h3 id="-return">不好的做法：在分支中 return</h3>
<pre><code>function foo(){
  if(condition){
    // 分支1的逻辑
    return;
  }
  // 分支2的逻辑
}
</code></pre><p>这种分支代码很常见，而且往往分支2的逻辑是先写的，也是函数的主要逻辑，分支1是后来对函数进行修补的过程中产生的。这种分支代码有一个很致命的问题，那就是，如果读者没有注意到分支1中的 <code>return</code>（我敢保证，在使用 IDE 把代码折叠起来后，没人能第一时间注意到这个 <code>return</code>），就不会意识到后面一段代码（分支 2）是有可能不会执行的。我的建议是，把分支2放到一个 <code>else</code> 语句块中，代码就会清晰可读很多：</p>
<pre><code>function foo(){
  if(condition){
    // 分支 1 的逻辑
  } else {
    // 分支 2 的逻辑
  }
}
</code></pre><blockquote>
<p>如果某个分支是空的，我也倾向于留下一个空行，这个空行明确地告诉代码的读者，如果走到这个 <code>else</code>，我什么都不会做。如果你不告诉读者，读者就会产生怀疑，并尝试自己去弄明白。</p>
</blockquote>
<h3 id="-">不好的做法：多个条件复合</h3>
<pre><code>if (condition1 &amp;&amp; condition2 &amp;&amp; condition3) {
  // 分支1：做一些事情
} else {
  // 分支2：其他的事情
}
</code></pre><p>这种代码也很常见：在若干条件同时满足（或有任一满足）的时候做一些主要的事情（分支1，也就是函数的主逻辑），否则就做一些次要的事情（分支2，比如抛异常，输出日志等）。虽然写代码的人知道什么是主要的事情，什么是次要的事情，但是代码的读者并不知道。读者遇到这种代码，就会产生困惑：分支2到底对应了什么条件？</p>
<p>在上面这段代码中，三种条件只要任意一个不成立就会执行到分支2，但这其实<strong>本质</strong>上是多个分支：1)条件1不满足，2)条件1满足而条件2不满足，3)条件1和2都满足而条件3不满足。如果我们笼统地使用同一段代码来处理多个分支，那么就会增加阅读者阅读分支2时的负担（需要考虑多个情况）。更可怕的是，如果后面需要增加一些额外的逻辑（比如，在条件1成立且条件2不成立的时候多输出一条日志），整个 <code>if-else</code> 都可能需要重构。</p>
<p>对这种场景，我通常这样写：</p>
<pre><code>if(condition1){
  if(condition2){
    // 分支1：做一些事情
  }else{
    // 分支2：其他的事情
  }
}else{
  // 分支3：其他的事情
}
</code></pre><p>即使分支2和分支3是完全一样的，我也认为有必要将其分开。虽然多了几行代码，收益却是很客观的。</p>
<blockquote>
<p>万事非绝对。对于一种情况，我不反对将多个条件复合起来，那就是当被复合的多个条件联系十分紧密的时候，比如 <code>if(foo &amp;&amp; foo.bar)</code>。</p>
</blockquote>
<h3 id="-">不好的做法：使用分支改变环境</h3>
<pre><code>let foo = someValue;
if(condition){
  foo = doSomethingTofoo(foo);
}
// 继续使用 foo 做一些事情
</code></pre><p>这种风格的代码很容易出现在那些屡经修补的代码文件中，很可能一开始是没有这个 <code>if</code> 代码块的，后来发现了一个 bug，于是加上了这个 <code>if</code> 代码块，在某些条件下对 <code>foo</code> 做一些特殊的处理。如果你希望项目在迭代过程中，风险越积越高，那么这个习惯绝对算得上「最佳实践」了。</p>
<p>事实上，这样的「补丁」积累起来，很快就会摧毁代码的可读性和可维护性。怎么说呢？当我们在写下上面这段代码中的 <code>if</code> 分支以试图修复 bug 的时候，我们内心存在这样一个假设：我们是<strong>知道</strong>程序在执行到这一行时，<code>foo</code> 什么样子的；但事实是，我们根本<strong>不知道</strong>，因为在这一行之前，<code>foo</code> 很可能已经被另一个人所写的尝试修复另一个 bug 的另一个 if 分支所篡改了。所以，当代码出现问题的时候，我们应当完整地审视一段独立的功能代码（通常是一个函数），并且多花一点时间来修复他，比如：</p>
<pre><code>const foo = condition ? doSomethingToFoo(someValue) : someValue;
</code></pre><p>我们看到，很多风险都是在项目快速迭代的过程中积累下来的。为了「快速」迭代，在添加功能代码的时候，我们有时候连函数这个最小单元的都不去了解，仅仅着眼于自己插入的那几行，希望在那几行中解决/hack掉所有问题，这是十分不可取的。</p>
<p>我认为，项目的迭代再快，其代码质量和可读性都应当有一个底线。这个底线是，当我们在修改代码的时候，应当<strong>完整了解当前修改的这个函数的逻辑</strong>，然后<strong>修改这个函数</strong>，以达到添加功能的目的。注意，这里的「修改一个函数」和「在函数某个位置添加几行代码」是不同的，在「修改一个函数」的时候，为了保证函数功能独立，逻辑清晰，不应该畏惧在这个函数的任意位置增删代码。</p>
<h2 id="-">函数</h2>
<h3 id="-">函数只做一件事情</h3>
<p>有时，我们会自作聪明地写出一些很「通用」的函数。比如，我们有可能写出下面这样一个获取用户信息的函数 <code>fetchUserInfo</code>：其逻辑是：</p>
<p>1) 当传入的参数是用户ID（字符串）时，返回单个用户数据；
2) 而传入的参数是用户ID的列表（数组）时，返回一个数组，其中的每一项是一个用户的数据。</p>
<pre><code>async function fetchUserInfo(id){
  const isSingle = typeof idList === &#39;string&#39;;
  const idList = isSingle ? [id] : id;
  const result = await request.post(&#39;/api/userInfo&#39;, {idList});
  return isSingle ? result[0] : result;
}

// 可以这样调用
const userList = await fetchUserInfo([&#39;1011&#39;, &#39;1013&#39;]);
// 也可以这样调用
const user = await fetchUserInfo(&#39;1017&#39;);
</code></pre><p>这个函数能够做两件事：1)获取多个用户的数据列表；2)获取单个用户的数据。在项目的其他地方调用 <code>fetchUserInfo</code> 函数时，也许我们确实能感到「方便」了一些。但是，代码的读者一定不会有相同的体会，当读者在某处读到 <code>fetchUserInfo([&#39;1011&#39;, &#39;1013&#39;])</code> 这句调用的代码时，他就会立刻对 <code>fetchUserInfo</code> 产生「第一印象」：这个函数需要传入用户ID数组；当他读到另外一种调用形式时，他一定会怀疑自己之前是不是眼睛花了。读者并不了解背后的「潜规则」，除非规则是预先设计好并且及时地更新到文档中。总之，我们绝不该一时兴起就写出上面这种函数。</p>
<p>遵循<strong>一个函数只做一件事</strong>的原则，我们可以将上述功能拆成两个函数<code>fetchMultipleUser</code> 和 <code>fetchSingleUser</code> 来实现。在需要获取用户数据时，只需要选择调用其中的一个函数。</p>
<pre><code>async function fetchMultipleUser(idList){
  return await request.post(&#39;/api/users/&#39;, {idList});
}

async function fetchSingleUser(id){
  return await fetchMultipleUser([id])[0];
}
</code></pre><p>上述改良不仅改善了代码的可读性，也改善了可维护性。举个例子，假设随着项目的迭代，获取单一用户信息的需求不再存在了。</p>
<ul>
<li>如果是改良前，我们会删掉那些「传入单个用户ID来调用 <code>fetchUserInfo</code>」的代码，同时保留剩下的那些「传入多个用户ID调用 <code>fetchUserInfo</code>」的代码， 但是 <code>fetchUserInfo</code> 函数几乎一定不会被更改。这样，函数内部 <code>isSingle</code> 为 <code>true</code> 的分支，就留在了代码中，成了永远都不会执行的「脏代码」，谁愿意看到自己的项目中充斥着永远不会执行的代码呢？</li>
<li>对于改良后的代码，我们（也许借助IDE）能够轻松检测到 <code>fetchSingleUser</code> 已经不会被调用了，然后放心大胆地直接删掉这个函数。</li>
</ul>
<p>那么，如何界定某个函数做的是不是<strong>一件事情</strong>？我的经验是这样：如果一个函数的参数仅仅包含<strong>输入数据（交给函数处理的数据）</strong>，而没有混杂或暗含有<strong>指令</strong>（以某种约定的方式告诉函数该怎么处理数据），那么函数所做的应当就是<strong>一件事情</strong>。比如说，改良前的 <code>fetchUserInfo</code> 函数的参数是「多个用户的ID数组<strong>或</strong>单个用户的ID」，这个「或」字其实就暗含了某种指令。</p>
<h3 id="-">函数应适当地处理异常</h3>
<p>有时候，我们会陷入一种很不好的习惯中，那就是，总是去尝试写出永远不会报错的函数。我们会给参数配上默认值，在很多地方使用 <code>||</code> 或者 <code>&amp;&amp;</code> 来避免代码运行出错，仿佛如果你的函数报错会成为某种耻辱似的。而且，当我们尝试去修复一个运行时报错的函数时，我们往往倾向于在报错的那一行添加一些兼容逻辑来避免报错。</p>
<p>举个例子，假设我们需要编写一个获取用户详情的函数，它要返回一个完整的用户信息对象：不仅包含ID，名字等基本信息，也包含诸如「收藏的书籍」等通过额外接口返回的信息。这些额外的接口也许不太稳定：</p>
<pre><code>async function getUserDetail(id){
  const user = await fetchSingleUser(id);
  user.favoriteBooks = (await fetchUserFavorits(id)).books;
  // 上面这一行报错了：Can not read property &#39;books&#39; of undefined.
  // ...
}
</code></pre><p>假设 <code>fetchUserFavorites</code> 会时不时地返回 <code>undefined</code>，那么读取其 <code>books</code> 属性自然就会报错。为了修复该问题，我们很可能会这样做：</p>
<pre><code>const favorites = await fetchUserFavorits(id);
user.favoriteBooks = favorites &amp;&amp; favorites.books;
// 这下不会报错了
</code></pre><p>这样做看似解决了问题：的确，<code>getUserDetail</code> 不会再报错了，但同时埋下了更深的隐患。</p>
<p>当 <code>fetchUserFavorites</code> 返回 <code>undefined</code> 时，程序已经处于一种异常状态了，我们没有任何理由放任程序继续运行下去。试想，如果后面的某个时刻（比如用户点击「我收藏的书」选项卡），程序试图遍历 <code>user.favoriteBooks</code> 属性（它被赋值成了<code>undefined</code>），那时也会报错，而且那时排查起来会更加困难。</p>
<p>如何处理上述的情况呢？我认为，如果被我们依赖的 <code>fetchUserFavorits</code> 属于当前的项目，那么 <code>getUserDetail</code> 对此报错真的没什么责任，因为 <code>fetchUserFavorits</code> 就不应该返回 <code>undefined</code>，我们应该去修复 <code>fetchUserFavorits</code>，任务失败时显式地告知出来，或者直接抛出异常。同时，<code>getUserDetail</code> 稍作修改：</p>
<pre><code>// 情况1：显式告知，此时应认为获取不到收藏数据不算致命的错误
const result = await fetchUserFavorits(id);
if(result.success){
  user.favoriteBooks = result.data.books;
} else {
  user.favoriteBooks = []
}

// 情况2：直接抛出异常
user.favoriteBooks = (await fetchUserFavorits(id)).books;
// 这时 `getUserDetail` 不需要改动，任由异常沿着调用栈向上冒泡
</code></pre><p>那么如果 <code>fetchUserFavorits</code> 不在当前项目中，而是依赖的外部模块呢？我认为，这时你就该为选择了这样一个不可靠的模块负责，在 <code>getUserDetail</code> 中增加一些「擦屁股」代码，来避免你的项目的<strong>其他部分</strong>受到侵害。</p>
<pre><code>const favorites = await fetchUserFavorits(id);
if(favorites){
  user.favoriteBooks = favorites.books;
} else {
  throw new Error(&#39;获取用户收藏失败&#39;);
}
</code></pre><h3 id="-">控制函数的副作用</h3>
<p>无副作用的函数，是<strong>不依赖上下文</strong>，也<strong>不改变上下文</strong>的函数。长久依赖，我们已经习惯了去写「有副作用的函数」，毕竟 JavaScript 需要通过副作用去操作环境的 API 完成任务。这就导致了，很多原本可以用纯粹的、无副作用的函数完成任务的场合，我们也会不自觉地采取有副作用的方式。</p>
<p>虽然看上去有点可笑，但我们有时候就是会写出下面这样的代码！</p>
<pre><code>async function getUserDetail(id){
  const user = await fetchSingleUserInfo(id);
  await addFavoritesToUser(user);
  ...
}
async function addFavoritesToUser(user){
  const result = await fetchUserFavorits(user.id);
  user.favoriteBooks = result.books;
  user.favoriteSongs = result.songs;
  user.isMusicFan = result.songs.length &gt; 100;
}
</code></pre><p>上面，<code>addFavoritesToUser</code> 函数就是一个「有副作用」的函数，它改变了 <code>users</code>，给它新增了几个个字段。问题在于，仅仅阅读 <code>getUserData</code> 函数的代码完全无法知道，user 会发生怎样的改变。</p>
<p>一个无副作用的函数应该是这样的：</p>
<pre><code>async function getUserDetail(id){
  const user = await fetchSingleUserInfo(id);
  const {books, songs, isMusicFan} = await getUserFavorites(id);
  return Object.assign(user, {books, songs, isMusicFan})
}
async function getUserFavorites(id){
  const {books, songs} = await fetchUserFavorits(user.id);
  return {
    books, songs, isMusicFan: result.songs.length &gt; 100
  }
}
</code></pre><p>难道这不是理所当然的形式吗？</p>
<h3 id="-">非侵入性地改造函数</h3>
<p>函数是一段独立和内聚的逻辑。在产品迭代的过程中，我们有时候不得不去修改函数的逻辑，为其添加一些新特性。之前我们也说过，一个函数只应做一件事，如果我们需要添加的新特性，与原先函数中的逻辑没有什么联系，那么决定是否通过<strong>改造这个函数</strong>来添加新功能，应当格外谨慎。</p>
<p>仍然用「向服务器查询用户数据」为例，假设我们有如下这样一个函数（为了让它看上去复杂一些，假设我们使用了一个更基本的 <code>request</code> 库）：</p>
<pre><code>const fetchUserInfo = (userId, callback) =&gt; {
  const param = {
    url: &#39;/api/user&#39;,
    method: &#39;post&#39;,
    payload: {id: userId}
  };
  request(param, callback);
}
</code></pre><p>现在有了一个新需求：为 <code>fetchUserInfo</code> 函数增加一道本地缓存，如果第二次请求同一个 userId 的用户信息，就不再重新向服务器发起请求，而直接以第一次请求得到的数据返回。</p>
<p>按照如下快捷简单的解决方案，改造这个函数只需要五分钟时间：</p>
<pre><code>const userInfoMap = {};
const fetchUserInfo = (userId, callback) =&gt; {
  if(userInfoMap[userId]){            // 新增代码
    callback(userInfoMap[userId]);    // 新增代码
  }else{                              // 新增代码
    const param = {
      // ... 参数
    };
    request(param, (result)=&gt;{
      userInfoMap[userId] = result;   // 新增代码
      callback(result);
    });
  }
}
</code></pre><p>不知你有没有发现，经此改造，这个函数的可读性已经明显降低了。没有缓存机制前，函数很清晰，一眼就能明白，加上新增的几行代码，已经不能一眼就看明白了。</p>
<p>实际上，「缓存」和「获取用户数据」完全是独立的两件事。我提出的方案是，编写一个通用的缓存包装函数（类似装饰器）<code>memorizeThunk</code>，对 <code>fetchUserInfo</code> 进行包装，产出一个新的具有缓存功能的 <code>fetchUserInfoCache</code>，在不破坏原有函数可读性的基础上，提供缓存功能。</p>
<pre><code>const memorizeThunk = (func, reducer) =&gt; {
  const cache = {};
  return (...args, callback) =&gt; {
    const key = reducer(...args);
    if(cache[key]){
      callback(...cache[key]);
    }else{
      func(...args, (...result)=&gt;{
        cache[key] = result;
        callback(...result);
      })
    }
  }
}
const fetchUserInfo = (userInfo, callback) =&gt; {
  // 原来的逻辑
}
const fetchUserInfoCache = memorize(fetchUserInfo, (userId)=&gt;userId);
</code></pre><p>也许实现这个方案需要十五分钟，但是试想一下，如果将来的某个时候，我们又不需要缓存功能了（或者需要提供一个开关来打开/关闭缓存功能），修改代码的负担是怎样的？第一种简单方案，我们需要精准（提心吊胆地）地删掉新增的若干行代码，而我提出的这种方案，是以函数为单位增删的，负担要轻很多，不是吗？</p>
<h2 id="-">类的结构</h2>
<h3 id="-">避免滥用成员函数</h3>
<p>JavaScript 中的类，是 ES6 才有的概念，此前是通过函数和原型链来模拟的。在编写类的时候，我们常常忍不住地写很多没必要的成员函数：当类的某个成员函数的内部逻辑有点复杂了，行数有点多了之后，我们往往会将其中一部分「独立」逻辑拆分出来，实现为类的另一个成员函数。比如，假设我们编写某个 React 组件来显示用户列表，用户列表的形式是<strong>每两个用户为一行</strong>。</p>
<pre><code>class UserList extends React.Component{
  // ...
  chunk = (users) =&gt; {
    // 将 [&#39;张三&#39;, &#39;李四&#39;, &#39;王二&#39;, &#39;麻子&#39;] 转化为 [[&#39;张三&#39;, &#39;李四&#39;], [&#39;王二&#39;, &#39;麻子&#39;]]
  }
  render(){
    const chunks = this.chunk(this.props.users);
    // 每两个用户为一行
    return (
      &lt;div&gt;
        {chunks.map(users=&gt;
          &lt;row&gt;
            {users.map(user =&gt; 
              &lt;col&gt;&lt;UserItem user={user}&gt;&lt;/col&gt;
            )}
          &lt;/row&gt;
        )}
      &lt;/div&gt;
    )
  }
}
</code></pre><p>如上述代码所示，<code>UserList</code> 组件按照「两个一行」的方式来显示用户列表，所以需要先将用户列表进行组合。进行组合的工作这件事情看上去是比较独立的，所以我们往往会将 <code>chunk</code> 实现成 <code>UserList</code> 的一个成员函数，在 render 中调用它。</p>
<p>我认为这样做并不可取，因为 chunk 只会被 render 所调用，仅仅服务于 render。阅读这个类源码的时候，读者其实只需要在 render 中去了解 chunk 函数就够了。然而 chunk 以成员函数的形式出现，扩大了它的可用范围，提前把自己曝光给了读者，反而会造成干扰。读者阅读源码，首先就是将代码折叠起来，然后他看到的是这样的景象：</p>
<pre><code>class UserList extends React.Component{
  componentDidMount(){...}
  componentWillUnmount(){...}
  chunk(){...}    // 读者的内心独白：这是什么鬼？
  render(){...}
}
</code></pre><p>熟悉 React 的同学对组件中出现一个不熟悉的方法多半会感到困惑。不管怎么说，读者肯定会首先去浏览一遍这些成员函数，但是阅读 <code>chunk</code> 函数带给读者的信息基本是零，反而还会干扰读者的思路，因为读者现在还不知道用户列表需要以「每两个一行」的方式呈现。所以我认为，<code>chunk</code> 函数绝对应该定义在 <code>render</code> 中，如下所示：</p>
<pre><code>render(){
  const chunk = (users) =&gt; ...
  const chunks = this.chunk(this.props.users);
  return (
    &lt;div&gt;
  ...
}
</code></pre><p>这样虽然函数的行数可能会比较多，但将代码折叠起来后，函数的逻辑则会非常清楚。而且，<code>chunk</code> 函数曝光在读者眼中的时机是非常正确的，那就是，在它即将被调用的地方。实际上，在「计算函数的代码行数」这个问题上，我会把内部定义的函数视为一行，因为函数对读者可以是黑盒，它的负担只有一行。</p>
<h2 id="-">总结</h2>
<p>伟大的文学作品都是建立在废纸堆上的，不断删改作品的过程有助于写作者培养良好的「语感」。当然，代码毕竟不是艺术品，程序员没有精力也不一定有必要像作家一样反复<strong>打磨</strong>自己的代码/作品。但是，如果我们能够在编写代码时稍稍多考虑一下实现的合理性，或者在添加新功能的时候稍稍回顾一下之前的实现，我们就能够培养出一些「代码语感」。这种「代码语感」会非常有助于我们写出高质量的可读的代码。</p>
]]></description>
            <link>http://xieguanglei.github.io/post/write-readable-code-practice.html</link>
            <guid isPermaLink="false">write-readable-code-practice</guid>
            <dc:creator><![CDATA[谢光磊]]></dc:creator>
            <pubDate>Tue, 03 Jan 2017 00:00:00 GMT</pubDate>
        </item>
    </channel>
</rss>